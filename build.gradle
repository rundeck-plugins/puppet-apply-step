import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.18.6'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

// Set extension properties
ext.pluginName = 'puppet-apply-step'
ext.pluginDescription = "executes the puppet apply command on each node matching the Job node filter"
ext.sopsCopyright = "Â© 2025, Rundeck, Inc."
ext.sopsUrl = "https://rundeck.com"
ext.buildDateString = new Date().format("yyyy-MM-dd'T'HH:mm:ssX")
ext.archivesBaseName = "puppet-apply-step"
ext.pluginBaseFolder = "puppet-apply-step"

scmVersion {
    ignoreUncommittedChanges = true
    tag {
        prefix = 'v'
        versionSeparator = ''
    }
}

project.version = scmVersion.version

task prepareZipContents {
    doLast {
        def assetsMap = new Properties()
        def tokens = assetsMap + [
            version    : version,
            date       : new Date().toString(),
            author     : sopsCopyright,
            url        : sopsUrl,
            title      : pluginName,
            description: pluginDescription,
            name       : archivesBaseName.toString(),
        ]

        copy {
            from("${project.projectDir}/puppet-apply-step/resources") {
                include '**/*.png'
                into "resources"
            }

            from("${project.projectDir}/puppet-apply-step/contents") {
                into "contents"
            }

            from("${project.projectDir}/puppet-apply-step/plugin.yaml") {
                filter(ReplaceTokens, tokens: tokens)
                exclude '**/*.png'
            }

            into "${project.buildDir}/zip-contents"
        }
    }
}

// Create the plugin zip task using modern Gradle syntax
task pluginZip(type: Jar) {
    dependsOn 'prepareZipContents'
    archiveBaseName = project.ext.archivesBaseName
    archiveVersion = project.version
    archiveClassifier = ''
    archiveExtension = 'zip'
    destinationDirectory = file("${buildDir}/libs")

    from("${project.buildDir}/zip-contents") {
        include("*.yaml")
        include("resources/*")
        include("contents/*")
        into("${project.ext.archivesBaseName}-v${version}")
    }

    manifest {
        attributes(
            'Rundeck-Plugin-Name': pluginName.toString(),
            'Rundeck-Plugin-Description': pluginDescription.toString(),
            'Rundeck-Plugin-Archive': 'true',
            'Rundeck-Plugin-File-Version': version,
            'Rundeck-Plugin-Author': sopsCopyright,
            'Rundeck-Plugin-URL': sopsUrl,
            'Rundeck-Plugin-Date': buildDateString
        )
    }
}

publishing {
    publications {
        mavenZip(MavenPublication) {
            artifact pluginZip
        }
    }
}

defaultTasks 'clean', 'build', 'pluginZip'

task build {
    dependsOn 'pluginZip'
}

task install {
    dependsOn 'build', 'publishToMavenLocal'
}

task clean(type: Delete) {
    delete 'build'
}

